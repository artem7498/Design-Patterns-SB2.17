//
//  ViewController.swift
//  Design Patterns SB2.17
//
//  Created by Артём on 4/22/21.
//

import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }


}


/*
 Factory (порождающий) - Позволяет создавать семейства связанных объектов, не привязываясь к конкретным классам создаваемых объектов.
 
 Builder - Позволяет создавать сложные объекты пошагово. Строитель даёт возможность использовать один и тот же код строительства для получения разных представлений объектов.
 
 Singleton (порождающий) - Гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.
 
 Adapter (структурный) - Позволяет объектам с несовместимыми интерфейсами работать вместе.
 
 Компоновщик (структурный) - Позволяет сгруппировать объекты в древовидную структуру, а затем работать с ними так, как будто это единичный объект.
 
 Фасад(структурный) - Предоставляет простой интерфейс к сложной системе классов, библиотеке или фреймворку.
 
 Command (Поведенческий)- Превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций.
 
 Memento(поведенческий) - Позволяет делать снимки состояния объектов, не раскрывая подробностей их реализации. Затем снимки можно использовать, чтобы восстановить прошлое состояние объектов
 
 Strategy(поведенческий) - Определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс, после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.
 
 Virtual Proxy(структурный) - Позволяет подставлять вместо реальных объектов специальные объекты-заменители. Эти объекты перехватывают вызовы к оригинальному объекту, позволяя сделать что-то до или после передачи вызова оригиналу.
 
 Visitor(поведенческий) - Позволяет создавать новые операции, не меняя классы объектов, над которыми эти операции могут выполняться.

 */
